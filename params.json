{"name":"Braid","tagline":"Simple tool to help track vendor branches in a Git repository.","body":"# Braid\r\n\r\nBraid is a simple tool to help track vendor branches in a\r\n[Git](http://git-scm.com/) repository.\r\n\r\n## Motivation\r\n\r\nVendoring allows you take the source code of an external library and ensure it's\r\nversion controlled along with the main project. This is in contrast to including\r\na reference to a packaged version of an external library that is available in a\r\nbinary artifact repository such as Maven Central, RubyGems or NPM.\r\n\r\nVendoring is useful when you need to patch or customize the external libraries\r\nor the external library is expected to co-evolve with the main project. The\r\ndeveloper can make changes to the main project and patch the library in a single\r\ncommit.\r\n\r\nThe problem arises when the external library makes changes that you want to\r\nintegrate into your local vendored version or the developer makes changes to the\r\nlocal version that they want integrated into the external library.\r\n\r\nA typical \"implementation\" of vendoring is to simply download or checkout the\r\nsource for the external library, remove the `.git` or `.svn` directories and\r\ncommit it to the main source tree. However this approach makes it very difficult\r\nto update the library. When you want to update the library do you re-apply your\r\nlocal changes onto a new copy of the vendored library or do you re-apply the\r\nchanges from the external library to local version? Both cases involve manual\r\ngeneration and application of patch files to source trees.\r\n\r\nThis is where Braid comes into play. Braid makes it easy to vendor in remote git\r\nrepositories and use an automated mechanism for updating the external library\r\nand generating patches to upgrade the external library.\r\n\r\nBraid creates a file `.braids` in the root of your repository that contains\r\nreferences to external libraries or mirrors. There are two types of mirrors in\r\nBraid: squashed and full. Mirrors are squashed by default, which is what you'll\r\ngenerally want because they're faster and don't pollute your history with\r\ncommits from the mirrors.\r\n\r\nFull mirrors are useful when you want to view imported history in your own\r\nproject. You usually want this if the mirror is also a repository you have\r\naccess to, for example, when using shared code across projects.\r\n\r\nPlease note that you cannot change between mirror types after the initial add.\r\nYou'll have to remove the mirror and add it again.\r\n\r\n## Installation\r\n\r\n    gem install braid\r\n\r\n## Quick usage - ruby project\r\n\r\nLet's assume we're writing the project `myproject` that needs grit in lib/grit. Initialize the repo (nothing braid related here):\r\n\r\n    git init myproject\r\n    cd myproject\r\n    touch README\r\n    git add README\r\n    git commit -m \"initial commit\"\r\n\r\nNow let's vendor grit:\r\n\r\n    braid add git://github.com/mojombo/grit.git lib/grit\r\n\r\nAnd you're done! Braid vendored grit into lib/grit. Feel free to inspect the changes with git log or git show.\r\n\r\nIf further down the line, you want to bring new changes from grit into your repository, just update the mirror:\r\n\r\n    braid update lib/grit\r\n\r\nIf you make changes to the grit library and want to generate a patch file so that you can submit the patch file\r\nto the grit project:\r\n\r\n    braid diff lib/grit > grit.patch\r\n\r\nOnce those changes have been applied to grit you probably want to update your local version of grit again.\r\n\r\n    braid update lib/grit\r\n\r\n## More usage\r\n\r\nUse the built in help system to find out about all commands and options:\r\n\r\n    braid help\r\n    braid help add # or braid add --help\r\n\r\n### Examples\r\n\r\n#### Adding a mirror\r\n\r\n    braid add git://github.com/rails/rails.git vendor/rails\r\n\r\n#### Adding mirrors with revisions\r\n\r\n    braid add --revision bf1b1e0 git://github.com/rails/rails.git vendor/rails\r\n\r\n#### Adding mirrors with full history\r\n\r\n    braid add --full git://github.com/mislav/will_paginate.git vendor/plugins/will_paginate\r\n\r\n#### Updating mirrors\r\n\r\n    # Update a specific mirror\r\n    braid update vendor/plugins/cache_fu\r\n    # Update all mirrors\r\n    braid update\r\n\r\n#### Updating mirrors with conflicts\r\n\r\nIf a braid update creates a conflict, braid will stop execution and leave the partially committed\r\nfiles in your working copy, just like a normal git merge conflict would.\r\n\r\nYou will then have to resolve all conflicts and manually run `git commit`. The commit message is\r\nalready prepared.\r\n\r\nIf you want to cancel the braid update and the merge, you'll have to reset your working copy and\r\nindex with `git reset --hard`.\r\n\r\n#### Locking and unlocking mirrors\r\n\r\n    braid update --revision 6c1c16b vendor/rails\r\n    braid update --head vendor/rails\r\n\r\n#### Showing local changes made to mirrors\r\n\r\n    braid diff vendor/rails\r\n\r\n## Contributing\r\n\r\nWe appreciate any patches, error reports and usage ideas you may have. Please\r\nsubmit an issue or pull request on GitHub.\r\n\r\n### Subversion\r\n\r\nWhile preparing to release Braid v1.0 the support for subversion repositories was removed as\r\nthere was no active maintainers and inadequate test coverage. If there is anyone motivated to\r\nre-add and maintain the Subversion support, please contact the authors.\r\n\r\n# Authors\r\n\r\n* Cristi Balan\r\n* Norbert Crombach\r\n* Peter Donald\r\n\r\n## Contributors (alphabetically)\r\n\r\n* Alan Harper\r\n* Christoph Sturm\r\n* Dennis Muhlestein\r\n* Ferdinand Svehla\r\n* Michael Klishin\r\n* Roman Heinrich\r\n* Travis Tilley\r\n* Tyler Rick\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}